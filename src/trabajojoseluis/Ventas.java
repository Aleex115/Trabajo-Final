/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabajojoseluis;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import misclases.Conex;
import misclases.Graficos;

/**
 *
 * @author code
 */
public class Ventas extends javax.swing.JFrame {

    DefaultTableModel dtm = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            // Hacer que todas las celdas no sean editables
            return false;
        }
    };
    /**
     * Creates new form Ventasd
     */
    Graficos currentGraph;
    String grupos = "Sin agrupar";
    ArrayList<String> titMarca = new ArrayList<>();
    ArrayList<Integer> dineroMarca = new ArrayList<>();
    ArrayList<Integer> datosMarca = new ArrayList<>();

    ArrayList<String> titEmple = new ArrayList<>();
    ArrayList<Integer> datosEmple = new ArrayList<>();
    ArrayList<Integer> dinerEmple = new ArrayList<>();

    ArrayList<String> titClien = new ArrayList<>();
    ArrayList<Integer> datosClien = new ArrayList<>();
    ArrayList<Integer> dineroClien = new ArrayList<>();

    ArrayList<String> titAño = new ArrayList<>();
    ArrayList<Integer> datosAño = new ArrayList<>();
    ArrayList<Integer> dineroAño = new ArrayList<>();

    ArrayList<String> titMes = new ArrayList<>();
    ArrayList<Integer> datosMes = new ArrayList<>();
    ArrayList<Integer> dineroMes = new ArrayList<>();

    String texto;

    public Ventas() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Reparaciones");
        this.setSize(910, 700);
        tabla.setModel(dtm);
        agrup.setSelectedIndex(0);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        rbDinero.setSelected(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        agrup = new javax.swing.JComboBox<>();
        btnConsultar = new javax.swing.JButton();
        btnGrafico = new javax.swing.JButton();
        coche = new javax.swing.JLabel();
        txtCoche = new javax.swing.JTextField();
        cliente = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        precio = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        empleado = new javax.swing.JLabel();
        txtEmpleado = new javax.swing.JTextField();
        rbDinero = new javax.swing.JRadioButton();
        rbCoches = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 400, 900, 280));

        jLabel2.setFont(new java.awt.Font("Gill Sans MT", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 0));
        jLabel2.setText("Sumario de ventas");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/UIX/dolars.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 120));

        jLabel4.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        jLabel4.setText("Agrupar por:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, -1, -1));

        agrup.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        agrup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin agrupar", "Empleado", "Cliente", "Marca", "Año", "Mes" }));
        agrup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agrupActionPerformed(evt);
            }
        });
        getContentPane().add(agrup, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, -1, -1));

        btnConsultar.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        getContentPane().add(btnConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, 140, 60));

        btnGrafico.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        btnGrafico.setText("Mostrar gráfico");
        btnGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficoActionPerformed(evt);
            }
        });
        getContentPane().add(btnGrafico, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 240, 210, 60));

        coche.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        coche.setText("Coche");
        getContentPane().add(coche, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, -1, -1));

        txtCoche.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        getContentPane().add(txtCoche, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 90, -1));

        cliente.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        cliente.setText("Cliente");
        getContentPane().add(cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 350, -1, -1));

        txtCliente.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        getContentPane().add(txtCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 350, 90, -1));

        precio.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        precio.setText("Precio");
        getContentPane().add(precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 350, -1, -1));

        txtPrecio.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        getContentPane().add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 350, 90, -1));

        empleado.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        empleado.setText("Empleado");
        getContentPane().add(empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, -1, -1));

        txtEmpleado.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        getContentPane().add(txtEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 350, 90, -1));

        buttonGroup1.add(rbDinero);
        rbDinero.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        rbDinero.setText("Dinero");
        getContentPane().add(rbDinero, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 240, -1, -1));

        buttonGroup1.add(rbCoches);
        rbCoches.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        rbCoches.setText("Coches");
        getContentPane().add(rbCoches, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 270, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        try {
            dtm.setRowCount(0);

            Connection conexion = (Connection) Conex.devolverConex(Ventas.this);
            if (grupos.equalsIgnoreCase("marca")) {
                titMarca.clear();
                datosMarca.clear();
                dineroMarca.clear();
                String sql = "SELECT c.marca,SUM(v.precio_venta) AS total,COUNT(*) AS 'Coches vendidos'  from ventas v JOIN coches c ON v.n_bastidor = c.n_bastidor GROUP BY c.marca";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Marca", "Dinero total", "Coches vendidos"};
                dtm.setColumnIdentifiers(titulos);

                while (rs.next()) {
                    String dato = rs.getString(1);
                    int din = rs.getInt(2);
                    int num = rs.getInt(3);
                    texto = "marca";

                    titMarca.add(dato);
                    datosMarca.add(num);
                    dineroMarca.add(din);
                    Object[] rowData = {dato, din, num};
                    dtm.addRow(rowData);
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }
            if (grupos.equalsIgnoreCase("empleado")) {
                titEmple.clear();
                datosEmple.clear();
                dinerEmple.clear();
                String sql = "SELECT ve.nombre,SUM(v.precio_venta) AS total,COUNT(*) AS 'coches vendidos'  from ventas v JOIN vendedores ve ON v.dni_empleado = ve.dni GROUP BY ve.dni";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Vendedor", "Dinero total", "Coches vendidos"};
                dtm.setColumnIdentifiers(titulos);

                while (rs.next()) {
                    String dato = rs.getString(1);
                    int din = rs.getInt(2);
                    int num = rs.getInt(3);

                    texto = "Empleado";

                    titEmple.add(dato);
                    datosEmple.add(num);
                    dinerEmple.add(din);
                    Object[] rowData = {dato, din, num};
                    dtm.addRow(rowData);
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }
            if (grupos.equalsIgnoreCase("cliente")) {

                titClien.clear();
                datosClien.clear();
                dineroClien.clear();
                String sql = "SELECT c.nombre,SUM(v.precio_venta) AS total,COUNT(*) AS 'coches vendidos'  from ventas v JOIN clientes c ON v.dni_cliente = c.dni GROUP BY c.dni";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Cliente", "Dinero total", "Coches vendidos"};
                dtm.setColumnIdentifiers(titulos);

                while (rs.next()) {
                    String dato = rs.getString(1);
                    int din = rs.getInt(2);
                    int num = rs.getInt(3);

                    texto = "Cliente";

                    titClien.add(dato);
                    datosClien.add(num);
                    dineroClien.add(din);
                    Object[] rowData = {dato, din, num};
                    dtm.addRow(rowData);
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }
            if (grupos.equalsIgnoreCase("año")) {
                titAño.clear();
                datosAño.clear();
                dineroAño.clear();
                String sql = "SELECT YEAR(fecha),SUM(precio_venta) AS total,COUNT(*) AS 'coches vendidos'  from ventas GROUP BY YEAR(fecha)";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Año", "Dinero total", "Coches vendidos"};
                dtm.setColumnIdentifiers(titulos);
                while (rs.next()) {
                    String dato = rs.getString(1);
                    int din = rs.getInt(2);
                    int num = rs.getInt(3);

                    texto = "Año";

                    titAño.add(dato);
                    datosAño.add(num);
                    dineroAño.add(din);
                    Object[] rowData = {dato, din, num};
                    dtm.addRow(rowData);;
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }
            if (grupos.equalsIgnoreCase("mes")) {
                titMes.clear();
                datosMes.clear();
                dineroMes.clear();

                String sql = "SELECT MONTHName(fecha),SUM(precio_venta) AS total,COUNT(*) AS 'coches vendidos'  from ventas GROUP BY MONTHname(fecha)";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Mes", "Dinero total", "Coches vendidos"};
                texto = "Mes (dinero generado)";
                dtm.setColumnIdentifiers(titulos);
                while (rs.next()) {
                    String dato = rs.getString(1);
                    int din = rs.getInt(2);
                    int num = rs.getInt(3);

                    texto = "Mes";

                    titMes.add(dato);
                    datosMes.add(num);
                    dineroMes.add(din);
                    Object[] rowData = {dato, din, num};
                    dtm.addRow(rowData);;
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }
            if (grupos.equalsIgnoreCase("Sin agrupar")) {
                String sql = "SELECT CONCAT(c.marca,' ', c.modelo) AS Coche, ve.nombre AS Empleado, cl.nombre AS Cliente, v.fecha, v.precio_venta "
                        + "FROM ventas v "
                        + "JOIN coches c ON v.n_bastidor = c.n_bastidor "
                        + "JOIN vendedores ve ON v.dni_empleado = ve.dni "
                        + "JOIN clientes cl ON v.dni_cliente = cl.dni "
                        + "WHERE CONCAT(c.marca, ' ', c.modelo) LIKE ? "
                        + "AND ve.nombre LIKE ? "
                        + "AND cl.nombre LIKE ? "
                        + "AND v.precio_venta > ?";
                PreparedStatement sentencia = (PreparedStatement) conexion.prepareStatement(sql);
                sentencia.setString(1, "%" + txtCoche.getText() + "%");
                sentencia.setString(2, "%" + txtEmpleado.getText() + "%");
                sentencia.setString(3, "%" + txtCliente.getText() + "%");
                if (txtPrecio.getText().isEmpty()) {
                    sentencia.setInt(4, 0);
                } else {
                    sentencia.setInt(4, Integer.parseInt(txtPrecio.getText()));
                }

                ResultSet rs = sentencia.executeQuery();
                String[] titulos = new String[]{"Coche", "Empleado", "Cliente", "Precio", "Fecha"};
                dtm.setColumnIdentifiers(titulos);
                while (rs.next()) {
                    Object[] rowData = {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getInt(5)};
                    dtm.addRow(rowData);
                }
                rs.close();
                sentencia.close();
                Conex.CerrarConex();

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);

        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void agrupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agrupActionPerformed
        grupos = (String) agrup.getSelectedItem();
        if (!grupos.equalsIgnoreCase("Sin agrupar")) {
            cliente.setVisible(false);
            txtCliente.setVisible(false);
            txtCoche.setVisible(false);
            coche.setVisible(false);
            empleado.setVisible(false);
            txtEmpleado.setVisible(false);
            precio.setVisible(false);
            txtPrecio.setVisible(false);
            btnGrafico.setVisible(true);
            rbCoches.setVisible(true);
            rbDinero.setVisible(true);

        } else {
            cliente.setVisible(true);
            txtCliente.setVisible(true);
            txtCoche.setVisible(true);
            coche.setVisible(true);
            empleado.setVisible(true);
            txtEmpleado.setVisible(true);
            precio.setVisible(true);
            txtPrecio.setVisible(true);
            btnGrafico.setVisible(false);
            rbCoches.setVisible(false);
            rbDinero.setVisible(false);
        }

    }//GEN-LAST:event_agrupActionPerformed

    private void btnGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficoActionPerformed
        try {
            switch (grupos.toLowerCase()) {
                case "marca":
                    if (titMarca.isEmpty() || datosMarca.isEmpty() || texto == null) {
                        JOptionPane.showMessageDialog(this, "No hay datos para mostrar en el gráfico");
                        return;
                    }
                    if (rbDinero.isSelected()) {
                        currentGraph = new Graficos(titMarca.toArray(new String[0]), dineroMarca.toArray(new Integer[0]), texto);

                    } else {
                        currentGraph = new Graficos(titMarca.toArray(new String[0]), datosMarca.toArray(new Integer[0]), texto);
                    }
                    break;
                case "empleado":
                    if (titEmple.isEmpty() || datosEmple.isEmpty() || texto == null) {
                        JOptionPane.showMessageDialog(this, "No hay datos para mostrar en el gráfico");
                        return;
                    }
                    if (rbDinero.isSelected()) {
                        currentGraph = new Graficos(titEmple.toArray(new String[0]), dinerEmple.toArray(new Integer[0]), texto);

                    } else {
                        currentGraph = new Graficos(titEmple.toArray(new String[0]), datosEmple.toArray(new Integer[0]), texto);

                    }
                    break;
                case "cliente":
                    if (titClien.isEmpty() || datosClien.isEmpty() || texto == null) {
                        JOptionPane.showMessageDialog(this, "No hay datos para mostrar en el gráfico");
                        return;
                    }
                    if (rbDinero.isSelected()) {
                        currentGraph = new Graficos(titClien.toArray(new String[0]), dineroClien.toArray(new Integer[0]), texto);

                    } else {
                        currentGraph = new Graficos(titClien.toArray(new String[0]), datosClien.toArray(new Integer[0]), texto);
                    }
                    break;
                case "año":
                    if (titAño.isEmpty() || datosAño.isEmpty() || texto == null) {
                        JOptionPane.showMessageDialog(this, "No hay datos para mostrar en el gráfico");
                        return;
                    }
                    if (rbDinero.isSelected()) {
                        currentGraph = new Graficos(titAño.toArray(new String[0]), dineroAño.toArray(new Integer[0]), texto);

                    } else {
                        currentGraph = new Graficos(titAño.toArray(new String[0]), datosAño.toArray(new Integer[0]), texto);

                    }
                    break;
                case "mes":
                    if (titMes.isEmpty() || datosMes.isEmpty() || texto == null) {
                        JOptionPane.showMessageDialog(this, "No hay datos para mostrar en el gráfico");
                        return;
                    }
                    if (rbDinero.isSelected()) {
                        currentGraph = new Graficos(titMes.toArray(new String[0]), dineroMes.toArray(new Integer[0]), texto);

                    } else {
                        currentGraph = new Graficos(titMes.toArray(new String[0]), datosMes.toArray(new Integer[0]), texto);

                    }

                    break;
                default:
                    return;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }//GEN-LAST:event_btnGraficoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> agrup;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnGrafico;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel cliente;
    private javax.swing.JLabel coche;
    private javax.swing.JLabel empleado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel precio;
    private javax.swing.JRadioButton rbCoches;
    private javax.swing.JRadioButton rbDinero;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCoche;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
